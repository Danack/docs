
An intro to React

The problem - handling forms in PHP sucks.

* layout HTML
* interactive Javascript
* displaying errors
* validation
* using the data


Symfony forms suck horribly
* They start off simple, but when you need to do anything complicated


Danack/FirstClassForms

I spent 'some' time trying to make forms be better and although that library was better (imho) than Symfony, it still sucked

It still left a whole load of Javascript needed to be written to make the form be acceptable for a decent UX.
The code for handling forms was still too complicated.



Javascript libraries?

Tried a couple, they all kind of either:

* were terrible

* forced you to learn a lot of configuration crap.

* didn't look like they were going to either be around in a few years


Enter ReactJS

* layout HTML
* interactive Javascript
* displaying errors


PHP still does
* validation
* using the data


You may have heard people mention

* separation of concerns
* being able to 'reason' about your code
* unit tests better than integration tests


LOL

How React works in a nutshell

*Magic.gif*


How React works in a nutshell

Domain specific language that combines Javascript + HTML in one file.

The HTML isn't even real HTML - it's custom form that allows embedding variables in it.

Uses ECMAScript (aka JS) 6 to avoid some of the kludges in previous versions of Javascript



Hello world element

This is what React looks like:

* we have a definition of a 'class', which is a React component.

* the bear minimum a React component needs to do is render itself

* The render function in this case, just returns a div with the property


We have a separate Javascript function that:

* looks for an element on the page with the ID of react_hello_element_1

* Creates an element of type HelloElement and passes in 'world' as the property.


Embedding React elements on a web page.

hello_element.html


binds to react_hello_element_1



Wait there's more: React Native

* It's apparently really easy to make native applications for IOS + Android using React components.

* These are the people who use it to power their apps.

/images/ReactUsers.png





Trade-offs


* Having to use NPM + Babel + Webpack is a shit-show

Honestly - JS devs are nuts.

* Doesn't play nice with JQuery

React stores it's own DOM and modifies that directly, before copying chunks of it into the browser's DOM, it means that you can't use tools like JQuery to modify the React components.


* Apparently some people consider it 'slow'


https://wildlyinaccurate.com/introducing-a-faster-bbc-news-front-page/

Here a story about how the BBC redesigned their front page to use React and thought it was too slow, so shifted the rendering (still using React) to the server side.

That kinds of sounds like, that's more 'using it for the wrong stuff'. React is about rendering dynamic content, not static content.




Download size of 150kB size in total is fine if you're not using it alongside another 1 MB of other JS libraries.



















